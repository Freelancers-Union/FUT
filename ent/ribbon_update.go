// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/mikestefanello/pagoda/ent/character"
	"github.com/mikestefanello/pagoda/ent/predicate"
	"github.com/mikestefanello/pagoda/ent/ribbon"
)

// RibbonUpdate is the builder for updating Ribbon entities.
type RibbonUpdate struct {
	config
	hooks    []Hook
	mutation *RibbonMutation
}

// Where appends a list predicates to the RibbonUpdate builder.
func (ru *RibbonUpdate) Where(ps ...predicate.Ribbon) *RibbonUpdate {
	ru.mutation.Where(ps...)
	return ru
}

// SetTimestamp sets the "timestamp" field.
func (ru *RibbonUpdate) SetTimestamp(t time.Time) *RibbonUpdate {
	ru.mutation.SetTimestamp(t)
	return ru
}

// SetNillableTimestamp sets the "timestamp" field if the given value is not nil.
func (ru *RibbonUpdate) SetNillableTimestamp(t *time.Time) *RibbonUpdate {
	if t != nil {
		ru.SetTimestamp(*t)
	}
	return ru
}

// SetRibbonID sets the "ribbon_id" field.
func (ru *RibbonUpdate) SetRibbonID(i int) *RibbonUpdate {
	ru.mutation.ResetRibbonID()
	ru.mutation.SetRibbonID(i)
	return ru
}

// SetNillableRibbonID sets the "ribbon_id" field if the given value is not nil.
func (ru *RibbonUpdate) SetNillableRibbonID(i *int) *RibbonUpdate {
	if i != nil {
		ru.SetRibbonID(*i)
	}
	return ru
}

// AddRibbonID adds i to the "ribbon_id" field.
func (ru *RibbonUpdate) AddRibbonID(i int) *RibbonUpdate {
	ru.mutation.AddRibbonID(i)
	return ru
}

// SetRibbonCount sets the "ribbon_count" field.
func (ru *RibbonUpdate) SetRibbonCount(i int) *RibbonUpdate {
	ru.mutation.ResetRibbonCount()
	ru.mutation.SetRibbonCount(i)
	return ru
}

// SetNillableRibbonCount sets the "ribbon_count" field if the given value is not nil.
func (ru *RibbonUpdate) SetNillableRibbonCount(i *int) *RibbonUpdate {
	if i != nil {
		ru.SetRibbonCount(*i)
	}
	return ru
}

// AddRibbonCount adds i to the "ribbon_count" field.
func (ru *RibbonUpdate) AddRibbonCount(i int) *RibbonUpdate {
	ru.mutation.AddRibbonCount(i)
	return ru
}

// SetCharacterID sets the "character" edge to the Character entity by ID.
func (ru *RibbonUpdate) SetCharacterID(id int) *RibbonUpdate {
	ru.mutation.SetCharacterID(id)
	return ru
}

// SetNillableCharacterID sets the "character" edge to the Character entity by ID if the given value is not nil.
func (ru *RibbonUpdate) SetNillableCharacterID(id *int) *RibbonUpdate {
	if id != nil {
		ru = ru.SetCharacterID(*id)
	}
	return ru
}

// SetCharacter sets the "character" edge to the Character entity.
func (ru *RibbonUpdate) SetCharacter(c *Character) *RibbonUpdate {
	return ru.SetCharacterID(c.ID)
}

// Mutation returns the RibbonMutation object of the builder.
func (ru *RibbonUpdate) Mutation() *RibbonMutation {
	return ru.mutation
}

// ClearCharacter clears the "character" edge to the Character entity.
func (ru *RibbonUpdate) ClearCharacter() *RibbonUpdate {
	ru.mutation.ClearCharacter()
	return ru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ru *RibbonUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ru.sqlSave, ru.mutation, ru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ru *RibbonUpdate) SaveX(ctx context.Context) int {
	affected, err := ru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ru *RibbonUpdate) Exec(ctx context.Context) error {
	_, err := ru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ru *RibbonUpdate) ExecX(ctx context.Context) {
	if err := ru.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ru *RibbonUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(ribbon.Table, ribbon.Columns, sqlgraph.NewFieldSpec(ribbon.FieldID, field.TypeInt))
	if ps := ru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ru.mutation.Timestamp(); ok {
		_spec.SetField(ribbon.FieldTimestamp, field.TypeTime, value)
	}
	if value, ok := ru.mutation.RibbonID(); ok {
		_spec.SetField(ribbon.FieldRibbonID, field.TypeInt, value)
	}
	if value, ok := ru.mutation.AddedRibbonID(); ok {
		_spec.AddField(ribbon.FieldRibbonID, field.TypeInt, value)
	}
	if value, ok := ru.mutation.RibbonCount(); ok {
		_spec.SetField(ribbon.FieldRibbonCount, field.TypeInt, value)
	}
	if value, ok := ru.mutation.AddedRibbonCount(); ok {
		_spec.AddField(ribbon.FieldRibbonCount, field.TypeInt, value)
	}
	if ru.mutation.CharacterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   ribbon.CharacterTable,
			Columns: []string{ribbon.CharacterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(character.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.CharacterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   ribbon.CharacterTable,
			Columns: []string{ribbon.CharacterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(character.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ribbon.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ru.mutation.done = true
	return n, nil
}

// RibbonUpdateOne is the builder for updating a single Ribbon entity.
type RibbonUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RibbonMutation
}

// SetTimestamp sets the "timestamp" field.
func (ruo *RibbonUpdateOne) SetTimestamp(t time.Time) *RibbonUpdateOne {
	ruo.mutation.SetTimestamp(t)
	return ruo
}

// SetNillableTimestamp sets the "timestamp" field if the given value is not nil.
func (ruo *RibbonUpdateOne) SetNillableTimestamp(t *time.Time) *RibbonUpdateOne {
	if t != nil {
		ruo.SetTimestamp(*t)
	}
	return ruo
}

// SetRibbonID sets the "ribbon_id" field.
func (ruo *RibbonUpdateOne) SetRibbonID(i int) *RibbonUpdateOne {
	ruo.mutation.ResetRibbonID()
	ruo.mutation.SetRibbonID(i)
	return ruo
}

// SetNillableRibbonID sets the "ribbon_id" field if the given value is not nil.
func (ruo *RibbonUpdateOne) SetNillableRibbonID(i *int) *RibbonUpdateOne {
	if i != nil {
		ruo.SetRibbonID(*i)
	}
	return ruo
}

// AddRibbonID adds i to the "ribbon_id" field.
func (ruo *RibbonUpdateOne) AddRibbonID(i int) *RibbonUpdateOne {
	ruo.mutation.AddRibbonID(i)
	return ruo
}

// SetRibbonCount sets the "ribbon_count" field.
func (ruo *RibbonUpdateOne) SetRibbonCount(i int) *RibbonUpdateOne {
	ruo.mutation.ResetRibbonCount()
	ruo.mutation.SetRibbonCount(i)
	return ruo
}

// SetNillableRibbonCount sets the "ribbon_count" field if the given value is not nil.
func (ruo *RibbonUpdateOne) SetNillableRibbonCount(i *int) *RibbonUpdateOne {
	if i != nil {
		ruo.SetRibbonCount(*i)
	}
	return ruo
}

// AddRibbonCount adds i to the "ribbon_count" field.
func (ruo *RibbonUpdateOne) AddRibbonCount(i int) *RibbonUpdateOne {
	ruo.mutation.AddRibbonCount(i)
	return ruo
}

// SetCharacterID sets the "character" edge to the Character entity by ID.
func (ruo *RibbonUpdateOne) SetCharacterID(id int) *RibbonUpdateOne {
	ruo.mutation.SetCharacterID(id)
	return ruo
}

// SetNillableCharacterID sets the "character" edge to the Character entity by ID if the given value is not nil.
func (ruo *RibbonUpdateOne) SetNillableCharacterID(id *int) *RibbonUpdateOne {
	if id != nil {
		ruo = ruo.SetCharacterID(*id)
	}
	return ruo
}

// SetCharacter sets the "character" edge to the Character entity.
func (ruo *RibbonUpdateOne) SetCharacter(c *Character) *RibbonUpdateOne {
	return ruo.SetCharacterID(c.ID)
}

// Mutation returns the RibbonMutation object of the builder.
func (ruo *RibbonUpdateOne) Mutation() *RibbonMutation {
	return ruo.mutation
}

// ClearCharacter clears the "character" edge to the Character entity.
func (ruo *RibbonUpdateOne) ClearCharacter() *RibbonUpdateOne {
	ruo.mutation.ClearCharacter()
	return ruo
}

// Where appends a list predicates to the RibbonUpdate builder.
func (ruo *RibbonUpdateOne) Where(ps ...predicate.Ribbon) *RibbonUpdateOne {
	ruo.mutation.Where(ps...)
	return ruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ruo *RibbonUpdateOne) Select(field string, fields ...string) *RibbonUpdateOne {
	ruo.fields = append([]string{field}, fields...)
	return ruo
}

// Save executes the query and returns the updated Ribbon entity.
func (ruo *RibbonUpdateOne) Save(ctx context.Context) (*Ribbon, error) {
	return withHooks(ctx, ruo.sqlSave, ruo.mutation, ruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ruo *RibbonUpdateOne) SaveX(ctx context.Context) *Ribbon {
	node, err := ruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ruo *RibbonUpdateOne) Exec(ctx context.Context) error {
	_, err := ruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruo *RibbonUpdateOne) ExecX(ctx context.Context) {
	if err := ruo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ruo *RibbonUpdateOne) sqlSave(ctx context.Context) (_node *Ribbon, err error) {
	_spec := sqlgraph.NewUpdateSpec(ribbon.Table, ribbon.Columns, sqlgraph.NewFieldSpec(ribbon.FieldID, field.TypeInt))
	id, ok := ruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Ribbon.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, ribbon.FieldID)
		for _, f := range fields {
			if !ribbon.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != ribbon.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ruo.mutation.Timestamp(); ok {
		_spec.SetField(ribbon.FieldTimestamp, field.TypeTime, value)
	}
	if value, ok := ruo.mutation.RibbonID(); ok {
		_spec.SetField(ribbon.FieldRibbonID, field.TypeInt, value)
	}
	if value, ok := ruo.mutation.AddedRibbonID(); ok {
		_spec.AddField(ribbon.FieldRibbonID, field.TypeInt, value)
	}
	if value, ok := ruo.mutation.RibbonCount(); ok {
		_spec.SetField(ribbon.FieldRibbonCount, field.TypeInt, value)
	}
	if value, ok := ruo.mutation.AddedRibbonCount(); ok {
		_spec.AddField(ribbon.FieldRibbonCount, field.TypeInt, value)
	}
	if ruo.mutation.CharacterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   ribbon.CharacterTable,
			Columns: []string{ribbon.CharacterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(character.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.CharacterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   ribbon.CharacterTable,
			Columns: []string{ribbon.CharacterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(character.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Ribbon{config: ruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ribbon.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ruo.mutation.done = true
	return _node, nil
}
