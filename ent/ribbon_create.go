// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/mikestefanello/pagoda/ent/character"
	"github.com/mikestefanello/pagoda/ent/ribbon"
)

// RibbonCreate is the builder for creating a Ribbon entity.
type RibbonCreate struct {
	config
	mutation *RibbonMutation
	hooks    []Hook
}

// SetTimestamp sets the "timestamp" field.
func (rc *RibbonCreate) SetTimestamp(t time.Time) *RibbonCreate {
	rc.mutation.SetTimestamp(t)
	return rc
}

// SetRibbonID sets the "ribbon_id" field.
func (rc *RibbonCreate) SetRibbonID(i int) *RibbonCreate {
	rc.mutation.SetRibbonID(i)
	return rc
}

// SetRibbonCount sets the "ribbon_count" field.
func (rc *RibbonCreate) SetRibbonCount(i int) *RibbonCreate {
	rc.mutation.SetRibbonCount(i)
	return rc
}

// SetCharacterID sets the "character" edge to the Character entity by ID.
func (rc *RibbonCreate) SetCharacterID(id int) *RibbonCreate {
	rc.mutation.SetCharacterID(id)
	return rc
}

// SetNillableCharacterID sets the "character" edge to the Character entity by ID if the given value is not nil.
func (rc *RibbonCreate) SetNillableCharacterID(id *int) *RibbonCreate {
	if id != nil {
		rc = rc.SetCharacterID(*id)
	}
	return rc
}

// SetCharacter sets the "character" edge to the Character entity.
func (rc *RibbonCreate) SetCharacter(c *Character) *RibbonCreate {
	return rc.SetCharacterID(c.ID)
}

// Mutation returns the RibbonMutation object of the builder.
func (rc *RibbonCreate) Mutation() *RibbonMutation {
	return rc.mutation
}

// Save creates the Ribbon in the database.
func (rc *RibbonCreate) Save(ctx context.Context) (*Ribbon, error) {
	return withHooks(ctx, rc.sqlSave, rc.mutation, rc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rc *RibbonCreate) SaveX(ctx context.Context) *Ribbon {
	v, err := rc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rc *RibbonCreate) Exec(ctx context.Context) error {
	_, err := rc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rc *RibbonCreate) ExecX(ctx context.Context) {
	if err := rc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rc *RibbonCreate) check() error {
	if _, ok := rc.mutation.Timestamp(); !ok {
		return &ValidationError{Name: "timestamp", err: errors.New(`ent: missing required field "Ribbon.timestamp"`)}
	}
	if _, ok := rc.mutation.RibbonID(); !ok {
		return &ValidationError{Name: "ribbon_id", err: errors.New(`ent: missing required field "Ribbon.ribbon_id"`)}
	}
	if _, ok := rc.mutation.RibbonCount(); !ok {
		return &ValidationError{Name: "ribbon_count", err: errors.New(`ent: missing required field "Ribbon.ribbon_count"`)}
	}
	return nil
}

func (rc *RibbonCreate) sqlSave(ctx context.Context) (*Ribbon, error) {
	if err := rc.check(); err != nil {
		return nil, err
	}
	_node, _spec := rc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	rc.mutation.id = &_node.ID
	rc.mutation.done = true
	return _node, nil
}

func (rc *RibbonCreate) createSpec() (*Ribbon, *sqlgraph.CreateSpec) {
	var (
		_node = &Ribbon{config: rc.config}
		_spec = sqlgraph.NewCreateSpec(ribbon.Table, sqlgraph.NewFieldSpec(ribbon.FieldID, field.TypeInt))
	)
	if value, ok := rc.mutation.Timestamp(); ok {
		_spec.SetField(ribbon.FieldTimestamp, field.TypeTime, value)
		_node.Timestamp = value
	}
	if value, ok := rc.mutation.RibbonID(); ok {
		_spec.SetField(ribbon.FieldRibbonID, field.TypeInt, value)
		_node.RibbonID = value
	}
	if value, ok := rc.mutation.RibbonCount(); ok {
		_spec.SetField(ribbon.FieldRibbonCount, field.TypeInt, value)
		_node.RibbonCount = value
	}
	if nodes := rc.mutation.CharacterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   ribbon.CharacterTable,
			Columns: []string{ribbon.CharacterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(character.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.character_ribbons = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// RibbonCreateBulk is the builder for creating many Ribbon entities in bulk.
type RibbonCreateBulk struct {
	config
	err      error
	builders []*RibbonCreate
}

// Save creates the Ribbon entities in the database.
func (rcb *RibbonCreateBulk) Save(ctx context.Context) ([]*Ribbon, error) {
	if rcb.err != nil {
		return nil, rcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(rcb.builders))
	nodes := make([]*Ribbon, len(rcb.builders))
	mutators := make([]Mutator, len(rcb.builders))
	for i := range rcb.builders {
		func(i int, root context.Context) {
			builder := rcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RibbonMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rcb *RibbonCreateBulk) SaveX(ctx context.Context) []*Ribbon {
	v, err := rcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rcb *RibbonCreateBulk) Exec(ctx context.Context) error {
	_, err := rcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rcb *RibbonCreateBulk) ExecX(ctx context.Context) {
	if err := rcb.Exec(ctx); err != nil {
		panic(err)
	}
}
