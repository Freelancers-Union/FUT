// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// CharactersColumns holds the columns for the "characters" table.
	CharactersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "character_id", Type: field.TypeUint64, Unique: true},
		{Name: "name", Type: field.TypeString},
		{Name: "faction_id", Type: field.TypeUint8},
		{Name: "date_created", Type: field.TypeTime},
		{Name: "outfit_characters", Type: field.TypeUint64, Nullable: true},
	}
	// CharactersTable holds the schema information for the "characters" table.
	CharactersTable = &schema.Table{
		Name:       "characters",
		Columns:    CharactersColumns,
		PrimaryKey: []*schema.Column{CharactersColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "characters_outfits_characters",
				Columns:    []*schema.Column{CharactersColumns[5]},
				RefColumns: []*schema.Column{OutfitsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "character_character_id",
				Unique:  false,
				Columns: []*schema.Column{CharactersColumns[1]},
			},
			{
				Name:    "character_name",
				Unique:  false,
				Columns: []*schema.Column{CharactersColumns[2]},
			},
		},
	}
	// OutfitsColumns holds the columns for the "outfits" table.
	OutfitsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUint64, Increment: true},
		{Name: "name", Type: field.TypeString},
		{Name: "tag", Type: field.TypeString},
		{Name: "faction", Type: field.TypeUint8},
	}
	// OutfitsTable holds the schema information for the "outfits" table.
	OutfitsTable = &schema.Table{
		Name:       "outfits",
		Columns:    OutfitsColumns,
		PrimaryKey: []*schema.Column{OutfitsColumns[0]},
	}
	// RibbonsColumns holds the columns for the "ribbons" table.
	RibbonsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "timestamp", Type: field.TypeTime},
		{Name: "ribbon_id", Type: field.TypeInt},
		{Name: "ribbon_count", Type: field.TypeInt},
		{Name: "character_ribbons", Type: field.TypeInt, Unique: true, Nullable: true},
	}
	// RibbonsTable holds the schema information for the "ribbons" table.
	RibbonsTable = &schema.Table{
		Name:       "ribbons",
		Columns:    RibbonsColumns,
		PrimaryKey: []*schema.Column{RibbonsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "ribbons_characters_ribbons",
				Columns:    []*schema.Column{RibbonsColumns[4]},
				RefColumns: []*schema.Column{CharactersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		CharactersTable,
		OutfitsTable,
		RibbonsTable,
	}
)

func init() {
	CharactersTable.ForeignKeys[0].RefTable = OutfitsTable
	RibbonsTable.ForeignKeys[0].RefTable = CharactersTable
}
