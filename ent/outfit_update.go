// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/mikestefanello/pagoda/ent/character"
	"github.com/mikestefanello/pagoda/ent/outfit"
	"github.com/mikestefanello/pagoda/ent/predicate"
)

// OutfitUpdate is the builder for updating Outfit entities.
type OutfitUpdate struct {
	config
	hooks    []Hook
	mutation *OutfitMutation
}

// Where appends a list predicates to the OutfitUpdate builder.
func (ou *OutfitUpdate) Where(ps ...predicate.Outfit) *OutfitUpdate {
	ou.mutation.Where(ps...)
	return ou
}

// SetName sets the "name" field.
func (ou *OutfitUpdate) SetName(s string) *OutfitUpdate {
	ou.mutation.SetName(s)
	return ou
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ou *OutfitUpdate) SetNillableName(s *string) *OutfitUpdate {
	if s != nil {
		ou.SetName(*s)
	}
	return ou
}

// SetTag sets the "tag" field.
func (ou *OutfitUpdate) SetTag(s string) *OutfitUpdate {
	ou.mutation.SetTag(s)
	return ou
}

// SetNillableTag sets the "tag" field if the given value is not nil.
func (ou *OutfitUpdate) SetNillableTag(s *string) *OutfitUpdate {
	if s != nil {
		ou.SetTag(*s)
	}
	return ou
}

// SetFaction sets the "faction" field.
func (ou *OutfitUpdate) SetFaction(u uint8) *OutfitUpdate {
	ou.mutation.ResetFaction()
	ou.mutation.SetFaction(u)
	return ou
}

// SetNillableFaction sets the "faction" field if the given value is not nil.
func (ou *OutfitUpdate) SetNillableFaction(u *uint8) *OutfitUpdate {
	if u != nil {
		ou.SetFaction(*u)
	}
	return ou
}

// AddFaction adds u to the "faction" field.
func (ou *OutfitUpdate) AddFaction(u int8) *OutfitUpdate {
	ou.mutation.AddFaction(u)
	return ou
}

// AddCharacterIDs adds the "characters" edge to the Character entity by IDs.
func (ou *OutfitUpdate) AddCharacterIDs(ids ...int) *OutfitUpdate {
	ou.mutation.AddCharacterIDs(ids...)
	return ou
}

// AddCharacters adds the "characters" edges to the Character entity.
func (ou *OutfitUpdate) AddCharacters(c ...*Character) *OutfitUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ou.AddCharacterIDs(ids...)
}

// Mutation returns the OutfitMutation object of the builder.
func (ou *OutfitUpdate) Mutation() *OutfitMutation {
	return ou.mutation
}

// ClearCharacters clears all "characters" edges to the Character entity.
func (ou *OutfitUpdate) ClearCharacters() *OutfitUpdate {
	ou.mutation.ClearCharacters()
	return ou
}

// RemoveCharacterIDs removes the "characters" edge to Character entities by IDs.
func (ou *OutfitUpdate) RemoveCharacterIDs(ids ...int) *OutfitUpdate {
	ou.mutation.RemoveCharacterIDs(ids...)
	return ou
}

// RemoveCharacters removes "characters" edges to Character entities.
func (ou *OutfitUpdate) RemoveCharacters(c ...*Character) *OutfitUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ou.RemoveCharacterIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ou *OutfitUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ou.sqlSave, ou.mutation, ou.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ou *OutfitUpdate) SaveX(ctx context.Context) int {
	affected, err := ou.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ou *OutfitUpdate) Exec(ctx context.Context) error {
	_, err := ou.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ou *OutfitUpdate) ExecX(ctx context.Context) {
	if err := ou.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ou *OutfitUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(outfit.Table, outfit.Columns, sqlgraph.NewFieldSpec(outfit.FieldID, field.TypeUint64))
	if ps := ou.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ou.mutation.Name(); ok {
		_spec.SetField(outfit.FieldName, field.TypeString, value)
	}
	if value, ok := ou.mutation.Tag(); ok {
		_spec.SetField(outfit.FieldTag, field.TypeString, value)
	}
	if value, ok := ou.mutation.Faction(); ok {
		_spec.SetField(outfit.FieldFaction, field.TypeUint8, value)
	}
	if value, ok := ou.mutation.AddedFaction(); ok {
		_spec.AddField(outfit.FieldFaction, field.TypeUint8, value)
	}
	if ou.mutation.CharactersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   outfit.CharactersTable,
			Columns: []string{outfit.CharactersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(character.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.RemovedCharactersIDs(); len(nodes) > 0 && !ou.mutation.CharactersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   outfit.CharactersTable,
			Columns: []string{outfit.CharactersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(character.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.CharactersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   outfit.CharactersTable,
			Columns: []string{outfit.CharactersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(character.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ou.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{outfit.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ou.mutation.done = true
	return n, nil
}

// OutfitUpdateOne is the builder for updating a single Outfit entity.
type OutfitUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OutfitMutation
}

// SetName sets the "name" field.
func (ouo *OutfitUpdateOne) SetName(s string) *OutfitUpdateOne {
	ouo.mutation.SetName(s)
	return ouo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ouo *OutfitUpdateOne) SetNillableName(s *string) *OutfitUpdateOne {
	if s != nil {
		ouo.SetName(*s)
	}
	return ouo
}

// SetTag sets the "tag" field.
func (ouo *OutfitUpdateOne) SetTag(s string) *OutfitUpdateOne {
	ouo.mutation.SetTag(s)
	return ouo
}

// SetNillableTag sets the "tag" field if the given value is not nil.
func (ouo *OutfitUpdateOne) SetNillableTag(s *string) *OutfitUpdateOne {
	if s != nil {
		ouo.SetTag(*s)
	}
	return ouo
}

// SetFaction sets the "faction" field.
func (ouo *OutfitUpdateOne) SetFaction(u uint8) *OutfitUpdateOne {
	ouo.mutation.ResetFaction()
	ouo.mutation.SetFaction(u)
	return ouo
}

// SetNillableFaction sets the "faction" field if the given value is not nil.
func (ouo *OutfitUpdateOne) SetNillableFaction(u *uint8) *OutfitUpdateOne {
	if u != nil {
		ouo.SetFaction(*u)
	}
	return ouo
}

// AddFaction adds u to the "faction" field.
func (ouo *OutfitUpdateOne) AddFaction(u int8) *OutfitUpdateOne {
	ouo.mutation.AddFaction(u)
	return ouo
}

// AddCharacterIDs adds the "characters" edge to the Character entity by IDs.
func (ouo *OutfitUpdateOne) AddCharacterIDs(ids ...int) *OutfitUpdateOne {
	ouo.mutation.AddCharacterIDs(ids...)
	return ouo
}

// AddCharacters adds the "characters" edges to the Character entity.
func (ouo *OutfitUpdateOne) AddCharacters(c ...*Character) *OutfitUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ouo.AddCharacterIDs(ids...)
}

// Mutation returns the OutfitMutation object of the builder.
func (ouo *OutfitUpdateOne) Mutation() *OutfitMutation {
	return ouo.mutation
}

// ClearCharacters clears all "characters" edges to the Character entity.
func (ouo *OutfitUpdateOne) ClearCharacters() *OutfitUpdateOne {
	ouo.mutation.ClearCharacters()
	return ouo
}

// RemoveCharacterIDs removes the "characters" edge to Character entities by IDs.
func (ouo *OutfitUpdateOne) RemoveCharacterIDs(ids ...int) *OutfitUpdateOne {
	ouo.mutation.RemoveCharacterIDs(ids...)
	return ouo
}

// RemoveCharacters removes "characters" edges to Character entities.
func (ouo *OutfitUpdateOne) RemoveCharacters(c ...*Character) *OutfitUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ouo.RemoveCharacterIDs(ids...)
}

// Where appends a list predicates to the OutfitUpdate builder.
func (ouo *OutfitUpdateOne) Where(ps ...predicate.Outfit) *OutfitUpdateOne {
	ouo.mutation.Where(ps...)
	return ouo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ouo *OutfitUpdateOne) Select(field string, fields ...string) *OutfitUpdateOne {
	ouo.fields = append([]string{field}, fields...)
	return ouo
}

// Save executes the query and returns the updated Outfit entity.
func (ouo *OutfitUpdateOne) Save(ctx context.Context) (*Outfit, error) {
	return withHooks(ctx, ouo.sqlSave, ouo.mutation, ouo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ouo *OutfitUpdateOne) SaveX(ctx context.Context) *Outfit {
	node, err := ouo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ouo *OutfitUpdateOne) Exec(ctx context.Context) error {
	_, err := ouo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ouo *OutfitUpdateOne) ExecX(ctx context.Context) {
	if err := ouo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ouo *OutfitUpdateOne) sqlSave(ctx context.Context) (_node *Outfit, err error) {
	_spec := sqlgraph.NewUpdateSpec(outfit.Table, outfit.Columns, sqlgraph.NewFieldSpec(outfit.FieldID, field.TypeUint64))
	id, ok := ouo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Outfit.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ouo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, outfit.FieldID)
		for _, f := range fields {
			if !outfit.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != outfit.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ouo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ouo.mutation.Name(); ok {
		_spec.SetField(outfit.FieldName, field.TypeString, value)
	}
	if value, ok := ouo.mutation.Tag(); ok {
		_spec.SetField(outfit.FieldTag, field.TypeString, value)
	}
	if value, ok := ouo.mutation.Faction(); ok {
		_spec.SetField(outfit.FieldFaction, field.TypeUint8, value)
	}
	if value, ok := ouo.mutation.AddedFaction(); ok {
		_spec.AddField(outfit.FieldFaction, field.TypeUint8, value)
	}
	if ouo.mutation.CharactersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   outfit.CharactersTable,
			Columns: []string{outfit.CharactersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(character.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.RemovedCharactersIDs(); len(nodes) > 0 && !ouo.mutation.CharactersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   outfit.CharactersTable,
			Columns: []string{outfit.CharactersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(character.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.CharactersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   outfit.CharactersTable,
			Columns: []string{outfit.CharactersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(character.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Outfit{config: ouo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ouo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{outfit.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ouo.mutation.done = true
	return _node, nil
}
