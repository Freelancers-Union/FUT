// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/mikestefanello/pagoda/ent/character"
	"github.com/mikestefanello/pagoda/ent/ribbon"
)

// Ribbon is the model entity for the Ribbon schema.
type Ribbon struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Timestamp holds the value of the "timestamp" field.
	Timestamp time.Time `json:"timestamp,omitempty"`
	// RibbonID holds the value of the "ribbon_id" field.
	RibbonID int `json:"ribbon_id,omitempty"`
	// RibbonCount holds the value of the "ribbon_count" field.
	RibbonCount int `json:"ribbon_count,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the RibbonQuery when eager-loading is set.
	Edges             RibbonEdges `json:"edges"`
	character_ribbons *int
	selectValues      sql.SelectValues
}

// RibbonEdges holds the relations/edges for other nodes in the graph.
type RibbonEdges struct {
	// Character holds the value of the character edge.
	Character *Character `json:"character,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// CharacterOrErr returns the Character value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RibbonEdges) CharacterOrErr() (*Character, error) {
	if e.loadedTypes[0] {
		if e.Character == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: character.Label}
		}
		return e.Character, nil
	}
	return nil, &NotLoadedError{edge: "character"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Ribbon) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case ribbon.FieldID, ribbon.FieldRibbonID, ribbon.FieldRibbonCount:
			values[i] = new(sql.NullInt64)
		case ribbon.FieldTimestamp:
			values[i] = new(sql.NullTime)
		case ribbon.ForeignKeys[0]: // character_ribbons
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Ribbon fields.
func (r *Ribbon) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case ribbon.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			r.ID = int(value.Int64)
		case ribbon.FieldTimestamp:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field timestamp", values[i])
			} else if value.Valid {
				r.Timestamp = value.Time
			}
		case ribbon.FieldRibbonID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field ribbon_id", values[i])
			} else if value.Valid {
				r.RibbonID = int(value.Int64)
			}
		case ribbon.FieldRibbonCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field ribbon_count", values[i])
			} else if value.Valid {
				r.RibbonCount = int(value.Int64)
			}
		case ribbon.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field character_ribbons", value)
			} else if value.Valid {
				r.character_ribbons = new(int)
				*r.character_ribbons = int(value.Int64)
			}
		default:
			r.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Ribbon.
// This includes values selected through modifiers, order, etc.
func (r *Ribbon) Value(name string) (ent.Value, error) {
	return r.selectValues.Get(name)
}

// QueryCharacter queries the "character" edge of the Ribbon entity.
func (r *Ribbon) QueryCharacter() *CharacterQuery {
	return NewRibbonClient(r.config).QueryCharacter(r)
}

// Update returns a builder for updating this Ribbon.
// Note that you need to call Ribbon.Unwrap() before calling this method if this Ribbon
// was returned from a transaction, and the transaction was committed or rolled back.
func (r *Ribbon) Update() *RibbonUpdateOne {
	return NewRibbonClient(r.config).UpdateOne(r)
}

// Unwrap unwraps the Ribbon entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (r *Ribbon) Unwrap() *Ribbon {
	_tx, ok := r.config.driver.(*txDriver)
	if !ok {
		panic("ent: Ribbon is not a transactional entity")
	}
	r.config.driver = _tx.drv
	return r
}

// String implements the fmt.Stringer.
func (r *Ribbon) String() string {
	var builder strings.Builder
	builder.WriteString("Ribbon(")
	builder.WriteString(fmt.Sprintf("id=%v, ", r.ID))
	builder.WriteString("timestamp=")
	builder.WriteString(r.Timestamp.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("ribbon_id=")
	builder.WriteString(fmt.Sprintf("%v", r.RibbonID))
	builder.WriteString(", ")
	builder.WriteString("ribbon_count=")
	builder.WriteString(fmt.Sprintf("%v", r.RibbonCount))
	builder.WriteByte(')')
	return builder.String()
}

// Ribbons is a parsable slice of Ribbon.
type Ribbons []*Ribbon
