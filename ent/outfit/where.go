// Code generated by ent, DO NOT EDIT.

package outfit

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/mikestefanello/pagoda/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.Outfit {
	return predicate.Outfit(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.Outfit {
	return predicate.Outfit(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.Outfit {
	return predicate.Outfit(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.Outfit {
	return predicate.Outfit(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.Outfit {
	return predicate.Outfit(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.Outfit {
	return predicate.Outfit(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.Outfit {
	return predicate.Outfit(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.Outfit {
	return predicate.Outfit(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.Outfit {
	return predicate.Outfit(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Outfit {
	return predicate.Outfit(sql.FieldEQ(FieldName, v))
}

// Tag applies equality check predicate on the "tag" field. It's identical to TagEQ.
func Tag(v string) predicate.Outfit {
	return predicate.Outfit(sql.FieldEQ(FieldTag, v))
}

// Faction applies equality check predicate on the "faction" field. It's identical to FactionEQ.
func Faction(v uint8) predicate.Outfit {
	return predicate.Outfit(sql.FieldEQ(FieldFaction, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Outfit {
	return predicate.Outfit(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Outfit {
	return predicate.Outfit(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Outfit {
	return predicate.Outfit(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Outfit {
	return predicate.Outfit(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Outfit {
	return predicate.Outfit(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Outfit {
	return predicate.Outfit(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Outfit {
	return predicate.Outfit(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Outfit {
	return predicate.Outfit(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Outfit {
	return predicate.Outfit(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Outfit {
	return predicate.Outfit(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Outfit {
	return predicate.Outfit(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Outfit {
	return predicate.Outfit(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Outfit {
	return predicate.Outfit(sql.FieldContainsFold(FieldName, v))
}

// TagEQ applies the EQ predicate on the "tag" field.
func TagEQ(v string) predicate.Outfit {
	return predicate.Outfit(sql.FieldEQ(FieldTag, v))
}

// TagNEQ applies the NEQ predicate on the "tag" field.
func TagNEQ(v string) predicate.Outfit {
	return predicate.Outfit(sql.FieldNEQ(FieldTag, v))
}

// TagIn applies the In predicate on the "tag" field.
func TagIn(vs ...string) predicate.Outfit {
	return predicate.Outfit(sql.FieldIn(FieldTag, vs...))
}

// TagNotIn applies the NotIn predicate on the "tag" field.
func TagNotIn(vs ...string) predicate.Outfit {
	return predicate.Outfit(sql.FieldNotIn(FieldTag, vs...))
}

// TagGT applies the GT predicate on the "tag" field.
func TagGT(v string) predicate.Outfit {
	return predicate.Outfit(sql.FieldGT(FieldTag, v))
}

// TagGTE applies the GTE predicate on the "tag" field.
func TagGTE(v string) predicate.Outfit {
	return predicate.Outfit(sql.FieldGTE(FieldTag, v))
}

// TagLT applies the LT predicate on the "tag" field.
func TagLT(v string) predicate.Outfit {
	return predicate.Outfit(sql.FieldLT(FieldTag, v))
}

// TagLTE applies the LTE predicate on the "tag" field.
func TagLTE(v string) predicate.Outfit {
	return predicate.Outfit(sql.FieldLTE(FieldTag, v))
}

// TagContains applies the Contains predicate on the "tag" field.
func TagContains(v string) predicate.Outfit {
	return predicate.Outfit(sql.FieldContains(FieldTag, v))
}

// TagHasPrefix applies the HasPrefix predicate on the "tag" field.
func TagHasPrefix(v string) predicate.Outfit {
	return predicate.Outfit(sql.FieldHasPrefix(FieldTag, v))
}

// TagHasSuffix applies the HasSuffix predicate on the "tag" field.
func TagHasSuffix(v string) predicate.Outfit {
	return predicate.Outfit(sql.FieldHasSuffix(FieldTag, v))
}

// TagEqualFold applies the EqualFold predicate on the "tag" field.
func TagEqualFold(v string) predicate.Outfit {
	return predicate.Outfit(sql.FieldEqualFold(FieldTag, v))
}

// TagContainsFold applies the ContainsFold predicate on the "tag" field.
func TagContainsFold(v string) predicate.Outfit {
	return predicate.Outfit(sql.FieldContainsFold(FieldTag, v))
}

// FactionEQ applies the EQ predicate on the "faction" field.
func FactionEQ(v uint8) predicate.Outfit {
	return predicate.Outfit(sql.FieldEQ(FieldFaction, v))
}

// FactionNEQ applies the NEQ predicate on the "faction" field.
func FactionNEQ(v uint8) predicate.Outfit {
	return predicate.Outfit(sql.FieldNEQ(FieldFaction, v))
}

// FactionIn applies the In predicate on the "faction" field.
func FactionIn(vs ...uint8) predicate.Outfit {
	return predicate.Outfit(sql.FieldIn(FieldFaction, vs...))
}

// FactionNotIn applies the NotIn predicate on the "faction" field.
func FactionNotIn(vs ...uint8) predicate.Outfit {
	return predicate.Outfit(sql.FieldNotIn(FieldFaction, vs...))
}

// FactionGT applies the GT predicate on the "faction" field.
func FactionGT(v uint8) predicate.Outfit {
	return predicate.Outfit(sql.FieldGT(FieldFaction, v))
}

// FactionGTE applies the GTE predicate on the "faction" field.
func FactionGTE(v uint8) predicate.Outfit {
	return predicate.Outfit(sql.FieldGTE(FieldFaction, v))
}

// FactionLT applies the LT predicate on the "faction" field.
func FactionLT(v uint8) predicate.Outfit {
	return predicate.Outfit(sql.FieldLT(FieldFaction, v))
}

// FactionLTE applies the LTE predicate on the "faction" field.
func FactionLTE(v uint8) predicate.Outfit {
	return predicate.Outfit(sql.FieldLTE(FieldFaction, v))
}

// HasCharacters applies the HasEdge predicate on the "characters" edge.
func HasCharacters() predicate.Outfit {
	return predicate.Outfit(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, CharactersTable, CharactersColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCharactersWith applies the HasEdge predicate on the "characters" edge with a given conditions (other predicates).
func HasCharactersWith(preds ...predicate.Character) predicate.Outfit {
	return predicate.Outfit(func(s *sql.Selector) {
		step := newCharactersStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Outfit) predicate.Outfit {
	return predicate.Outfit(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Outfit) predicate.Outfit {
	return predicate.Outfit(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Outfit) predicate.Outfit {
	return predicate.Outfit(sql.NotPredicates(p))
}
