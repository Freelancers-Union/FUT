// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/mikestefanello/pagoda/ent/character"
	"github.com/mikestefanello/pagoda/ent/outfit"
	"github.com/mikestefanello/pagoda/ent/ribbon"
)

// Character is the model entity for the Character schema.
type Character struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CharacterID holds the value of the "character_id" field.
	CharacterID uint64 `json:"character_id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// FactionID holds the value of the "faction_id" field.
	FactionID uint8 `json:"faction_id,omitempty"`
	// DateCreated holds the value of the "date_created" field.
	DateCreated time.Time `json:"date_created,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CharacterQuery when eager-loading is set.
	Edges             CharacterEdges `json:"edges"`
	outfit_characters *uint64
	selectValues      sql.SelectValues
}

// CharacterEdges holds the relations/edges for other nodes in the graph.
type CharacterEdges struct {
	// Outfit holds the value of the outfit edge.
	Outfit *Outfit `json:"outfit,omitempty"`
	// Ribbons holds the value of the ribbons edge.
	Ribbons *Ribbon `json:"ribbons,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// OutfitOrErr returns the Outfit value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CharacterEdges) OutfitOrErr() (*Outfit, error) {
	if e.loadedTypes[0] {
		if e.Outfit == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: outfit.Label}
		}
		return e.Outfit, nil
	}
	return nil, &NotLoadedError{edge: "outfit"}
}

// RibbonsOrErr returns the Ribbons value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CharacterEdges) RibbonsOrErr() (*Ribbon, error) {
	if e.loadedTypes[1] {
		if e.Ribbons == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: ribbon.Label}
		}
		return e.Ribbons, nil
	}
	return nil, &NotLoadedError{edge: "ribbons"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Character) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case character.FieldID, character.FieldCharacterID, character.FieldFactionID:
			values[i] = new(sql.NullInt64)
		case character.FieldName:
			values[i] = new(sql.NullString)
		case character.FieldDateCreated:
			values[i] = new(sql.NullTime)
		case character.ForeignKeys[0]: // outfit_characters
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Character fields.
func (c *Character) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case character.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			c.ID = int(value.Int64)
		case character.FieldCharacterID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field character_id", values[i])
			} else if value.Valid {
				c.CharacterID = uint64(value.Int64)
			}
		case character.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				c.Name = value.String
			}
		case character.FieldFactionID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field faction_id", values[i])
			} else if value.Valid {
				c.FactionID = uint8(value.Int64)
			}
		case character.FieldDateCreated:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field date_created", values[i])
			} else if value.Valid {
				c.DateCreated = value.Time
			}
		case character.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field outfit_characters", value)
			} else if value.Valid {
				c.outfit_characters = new(uint64)
				*c.outfit_characters = uint64(value.Int64)
			}
		default:
			c.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Character.
// This includes values selected through modifiers, order, etc.
func (c *Character) Value(name string) (ent.Value, error) {
	return c.selectValues.Get(name)
}

// QueryOutfit queries the "outfit" edge of the Character entity.
func (c *Character) QueryOutfit() *OutfitQuery {
	return NewCharacterClient(c.config).QueryOutfit(c)
}

// QueryRibbons queries the "ribbons" edge of the Character entity.
func (c *Character) QueryRibbons() *RibbonQuery {
	return NewCharacterClient(c.config).QueryRibbons(c)
}

// Update returns a builder for updating this Character.
// Note that you need to call Character.Unwrap() before calling this method if this Character
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Character) Update() *CharacterUpdateOne {
	return NewCharacterClient(c.config).UpdateOne(c)
}

// Unwrap unwraps the Character entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Character) Unwrap() *Character {
	_tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Character is not a transactional entity")
	}
	c.config.driver = _tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Character) String() string {
	var builder strings.Builder
	builder.WriteString("Character(")
	builder.WriteString(fmt.Sprintf("id=%v, ", c.ID))
	builder.WriteString("character_id=")
	builder.WriteString(fmt.Sprintf("%v", c.CharacterID))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(c.Name)
	builder.WriteString(", ")
	builder.WriteString("faction_id=")
	builder.WriteString(fmt.Sprintf("%v", c.FactionID))
	builder.WriteString(", ")
	builder.WriteString("date_created=")
	builder.WriteString(c.DateCreated.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Characters is a parsable slice of Character.
type Characters []*Character
