// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"github.com/mikestefanello/pagoda/ent/migrate"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/mikestefanello/pagoda/ent/character"
	"github.com/mikestefanello/pagoda/ent/outfit"
	"github.com/mikestefanello/pagoda/ent/ribbon"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Character is the client for interacting with the Character builders.
	Character *CharacterClient
	// Outfit is the client for interacting with the Outfit builders.
	Outfit *OutfitClient
	// Ribbon is the client for interacting with the Ribbon builders.
	Ribbon *RibbonClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Character = NewCharacterClient(c.config)
	c.Outfit = NewOutfitClient(c.config)
	c.Ribbon = NewRibbonClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:       ctx,
		config:    cfg,
		Character: NewCharacterClient(cfg),
		Outfit:    NewOutfitClient(cfg),
		Ribbon:    NewRibbonClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:       ctx,
		config:    cfg,
		Character: NewCharacterClient(cfg),
		Outfit:    NewOutfitClient(cfg),
		Ribbon:    NewRibbonClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Character.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Character.Use(hooks...)
	c.Outfit.Use(hooks...)
	c.Ribbon.Use(hooks...)
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	c.Character.Intercept(interceptors...)
	c.Outfit.Intercept(interceptors...)
	c.Ribbon.Intercept(interceptors...)
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *CharacterMutation:
		return c.Character.mutate(ctx, m)
	case *OutfitMutation:
		return c.Outfit.mutate(ctx, m)
	case *RibbonMutation:
		return c.Ribbon.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// CharacterClient is a client for the Character schema.
type CharacterClient struct {
	config
}

// NewCharacterClient returns a client for the Character from the given config.
func NewCharacterClient(c config) *CharacterClient {
	return &CharacterClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `character.Hooks(f(g(h())))`.
func (c *CharacterClient) Use(hooks ...Hook) {
	c.hooks.Character = append(c.hooks.Character, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `character.Intercept(f(g(h())))`.
func (c *CharacterClient) Intercept(interceptors ...Interceptor) {
	c.inters.Character = append(c.inters.Character, interceptors...)
}

// Create returns a builder for creating a Character entity.
func (c *CharacterClient) Create() *CharacterCreate {
	mutation := newCharacterMutation(c.config, OpCreate)
	return &CharacterCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Character entities.
func (c *CharacterClient) CreateBulk(builders ...*CharacterCreate) *CharacterCreateBulk {
	return &CharacterCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *CharacterClient) MapCreateBulk(slice any, setFunc func(*CharacterCreate, int)) *CharacterCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &CharacterCreateBulk{err: fmt.Errorf("calling to CharacterClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*CharacterCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &CharacterCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Character.
func (c *CharacterClient) Update() *CharacterUpdate {
	mutation := newCharacterMutation(c.config, OpUpdate)
	return &CharacterUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CharacterClient) UpdateOne(ch *Character) *CharacterUpdateOne {
	mutation := newCharacterMutation(c.config, OpUpdateOne, withCharacter(ch))
	return &CharacterUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CharacterClient) UpdateOneID(id int) *CharacterUpdateOne {
	mutation := newCharacterMutation(c.config, OpUpdateOne, withCharacterID(id))
	return &CharacterUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Character.
func (c *CharacterClient) Delete() *CharacterDelete {
	mutation := newCharacterMutation(c.config, OpDelete)
	return &CharacterDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CharacterClient) DeleteOne(ch *Character) *CharacterDeleteOne {
	return c.DeleteOneID(ch.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CharacterClient) DeleteOneID(id int) *CharacterDeleteOne {
	builder := c.Delete().Where(character.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CharacterDeleteOne{builder}
}

// Query returns a query builder for Character.
func (c *CharacterClient) Query() *CharacterQuery {
	return &CharacterQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCharacter},
		inters: c.Interceptors(),
	}
}

// Get returns a Character entity by its id.
func (c *CharacterClient) Get(ctx context.Context, id int) (*Character, error) {
	return c.Query().Where(character.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CharacterClient) GetX(ctx context.Context, id int) *Character {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOutfit queries the outfit edge of a Character.
func (c *CharacterClient) QueryOutfit(ch *Character) *OutfitQuery {
	query := (&OutfitClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ch.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(character.Table, character.FieldID, id),
			sqlgraph.To(outfit.Table, outfit.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, character.OutfitTable, character.OutfitColumn),
		)
		fromV = sqlgraph.Neighbors(ch.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRibbons queries the ribbons edge of a Character.
func (c *CharacterClient) QueryRibbons(ch *Character) *RibbonQuery {
	query := (&RibbonClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ch.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(character.Table, character.FieldID, id),
			sqlgraph.To(ribbon.Table, ribbon.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, character.RibbonsTable, character.RibbonsColumn),
		)
		fromV = sqlgraph.Neighbors(ch.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CharacterClient) Hooks() []Hook {
	return c.hooks.Character
}

// Interceptors returns the client interceptors.
func (c *CharacterClient) Interceptors() []Interceptor {
	return c.inters.Character
}

func (c *CharacterClient) mutate(ctx context.Context, m *CharacterMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CharacterCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CharacterUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CharacterUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CharacterDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Character mutation op: %q", m.Op())
	}
}

// OutfitClient is a client for the Outfit schema.
type OutfitClient struct {
	config
}

// NewOutfitClient returns a client for the Outfit from the given config.
func NewOutfitClient(c config) *OutfitClient {
	return &OutfitClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `outfit.Hooks(f(g(h())))`.
func (c *OutfitClient) Use(hooks ...Hook) {
	c.hooks.Outfit = append(c.hooks.Outfit, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `outfit.Intercept(f(g(h())))`.
func (c *OutfitClient) Intercept(interceptors ...Interceptor) {
	c.inters.Outfit = append(c.inters.Outfit, interceptors...)
}

// Create returns a builder for creating a Outfit entity.
func (c *OutfitClient) Create() *OutfitCreate {
	mutation := newOutfitMutation(c.config, OpCreate)
	return &OutfitCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Outfit entities.
func (c *OutfitClient) CreateBulk(builders ...*OutfitCreate) *OutfitCreateBulk {
	return &OutfitCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *OutfitClient) MapCreateBulk(slice any, setFunc func(*OutfitCreate, int)) *OutfitCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &OutfitCreateBulk{err: fmt.Errorf("calling to OutfitClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*OutfitCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &OutfitCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Outfit.
func (c *OutfitClient) Update() *OutfitUpdate {
	mutation := newOutfitMutation(c.config, OpUpdate)
	return &OutfitUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OutfitClient) UpdateOne(o *Outfit) *OutfitUpdateOne {
	mutation := newOutfitMutation(c.config, OpUpdateOne, withOutfit(o))
	return &OutfitUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OutfitClient) UpdateOneID(id uint64) *OutfitUpdateOne {
	mutation := newOutfitMutation(c.config, OpUpdateOne, withOutfitID(id))
	return &OutfitUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Outfit.
func (c *OutfitClient) Delete() *OutfitDelete {
	mutation := newOutfitMutation(c.config, OpDelete)
	return &OutfitDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *OutfitClient) DeleteOne(o *Outfit) *OutfitDeleteOne {
	return c.DeleteOneID(o.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *OutfitClient) DeleteOneID(id uint64) *OutfitDeleteOne {
	builder := c.Delete().Where(outfit.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OutfitDeleteOne{builder}
}

// Query returns a query builder for Outfit.
func (c *OutfitClient) Query() *OutfitQuery {
	return &OutfitQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeOutfit},
		inters: c.Interceptors(),
	}
}

// Get returns a Outfit entity by its id.
func (c *OutfitClient) Get(ctx context.Context, id uint64) (*Outfit, error) {
	return c.Query().Where(outfit.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OutfitClient) GetX(ctx context.Context, id uint64) *Outfit {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCharacters queries the characters edge of a Outfit.
func (c *OutfitClient) QueryCharacters(o *Outfit) *CharacterQuery {
	query := (&CharacterClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := o.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(outfit.Table, outfit.FieldID, id),
			sqlgraph.To(character.Table, character.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, outfit.CharactersTable, outfit.CharactersColumn),
		)
		fromV = sqlgraph.Neighbors(o.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *OutfitClient) Hooks() []Hook {
	return c.hooks.Outfit
}

// Interceptors returns the client interceptors.
func (c *OutfitClient) Interceptors() []Interceptor {
	return c.inters.Outfit
}

func (c *OutfitClient) mutate(ctx context.Context, m *OutfitMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&OutfitCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&OutfitUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&OutfitUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&OutfitDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Outfit mutation op: %q", m.Op())
	}
}

// RibbonClient is a client for the Ribbon schema.
type RibbonClient struct {
	config
}

// NewRibbonClient returns a client for the Ribbon from the given config.
func NewRibbonClient(c config) *RibbonClient {
	return &RibbonClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `ribbon.Hooks(f(g(h())))`.
func (c *RibbonClient) Use(hooks ...Hook) {
	c.hooks.Ribbon = append(c.hooks.Ribbon, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `ribbon.Intercept(f(g(h())))`.
func (c *RibbonClient) Intercept(interceptors ...Interceptor) {
	c.inters.Ribbon = append(c.inters.Ribbon, interceptors...)
}

// Create returns a builder for creating a Ribbon entity.
func (c *RibbonClient) Create() *RibbonCreate {
	mutation := newRibbonMutation(c.config, OpCreate)
	return &RibbonCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Ribbon entities.
func (c *RibbonClient) CreateBulk(builders ...*RibbonCreate) *RibbonCreateBulk {
	return &RibbonCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *RibbonClient) MapCreateBulk(slice any, setFunc func(*RibbonCreate, int)) *RibbonCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &RibbonCreateBulk{err: fmt.Errorf("calling to RibbonClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*RibbonCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &RibbonCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Ribbon.
func (c *RibbonClient) Update() *RibbonUpdate {
	mutation := newRibbonMutation(c.config, OpUpdate)
	return &RibbonUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RibbonClient) UpdateOne(r *Ribbon) *RibbonUpdateOne {
	mutation := newRibbonMutation(c.config, OpUpdateOne, withRibbon(r))
	return &RibbonUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RibbonClient) UpdateOneID(id int) *RibbonUpdateOne {
	mutation := newRibbonMutation(c.config, OpUpdateOne, withRibbonID(id))
	return &RibbonUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Ribbon.
func (c *RibbonClient) Delete() *RibbonDelete {
	mutation := newRibbonMutation(c.config, OpDelete)
	return &RibbonDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *RibbonClient) DeleteOne(r *Ribbon) *RibbonDeleteOne {
	return c.DeleteOneID(r.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *RibbonClient) DeleteOneID(id int) *RibbonDeleteOne {
	builder := c.Delete().Where(ribbon.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RibbonDeleteOne{builder}
}

// Query returns a query builder for Ribbon.
func (c *RibbonClient) Query() *RibbonQuery {
	return &RibbonQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeRibbon},
		inters: c.Interceptors(),
	}
}

// Get returns a Ribbon entity by its id.
func (c *RibbonClient) Get(ctx context.Context, id int) (*Ribbon, error) {
	return c.Query().Where(ribbon.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RibbonClient) GetX(ctx context.Context, id int) *Ribbon {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCharacter queries the character edge of a Ribbon.
func (c *RibbonClient) QueryCharacter(r *Ribbon) *CharacterQuery {
	query := (&CharacterClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(ribbon.Table, ribbon.FieldID, id),
			sqlgraph.To(character.Table, character.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, ribbon.CharacterTable, ribbon.CharacterColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *RibbonClient) Hooks() []Hook {
	return c.hooks.Ribbon
}

// Interceptors returns the client interceptors.
func (c *RibbonClient) Interceptors() []Interceptor {
	return c.inters.Ribbon
}

func (c *RibbonClient) mutate(ctx context.Context, m *RibbonMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&RibbonCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&RibbonUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&RibbonUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&RibbonDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Ribbon mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		Character, Outfit, Ribbon []ent.Hook
	}
	inters struct {
		Character, Outfit, Ribbon []ent.Interceptor
	}
)
