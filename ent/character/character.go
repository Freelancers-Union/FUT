// Code generated by ent, DO NOT EDIT.

package character

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the character type in the database.
	Label = "character"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCharacterID holds the string denoting the character_id field in the database.
	FieldCharacterID = "character_id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldFactionID holds the string denoting the faction_id field in the database.
	FieldFactionID = "faction_id"
	// FieldDateCreated holds the string denoting the date_created field in the database.
	FieldDateCreated = "date_created"
	// EdgeOutfit holds the string denoting the outfit edge name in mutations.
	EdgeOutfit = "outfit"
	// EdgeRibbons holds the string denoting the ribbons edge name in mutations.
	EdgeRibbons = "ribbons"
	// Table holds the table name of the character in the database.
	Table = "characters"
	// OutfitTable is the table that holds the outfit relation/edge.
	OutfitTable = "characters"
	// OutfitInverseTable is the table name for the Outfit entity.
	// It exists in this package in order to avoid circular dependency with the "outfit" package.
	OutfitInverseTable = "outfits"
	// OutfitColumn is the table column denoting the outfit relation/edge.
	OutfitColumn = "outfit_characters"
	// RibbonsTable is the table that holds the ribbons relation/edge.
	RibbonsTable = "ribbons"
	// RibbonsInverseTable is the table name for the Ribbon entity.
	// It exists in this package in order to avoid circular dependency with the "ribbon" package.
	RibbonsInverseTable = "ribbons"
	// RibbonsColumn is the table column denoting the ribbons relation/edge.
	RibbonsColumn = "character_ribbons"
)

// Columns holds all SQL columns for character fields.
var Columns = []string{
	FieldID,
	FieldCharacterID,
	FieldName,
	FieldFactionID,
	FieldDateCreated,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "characters"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"outfit_characters",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the Character queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCharacterID orders the results by the character_id field.
func ByCharacterID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCharacterID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByFactionID orders the results by the faction_id field.
func ByFactionID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFactionID, opts...).ToFunc()
}

// ByDateCreated orders the results by the date_created field.
func ByDateCreated(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDateCreated, opts...).ToFunc()
}

// ByOutfitField orders the results by outfit field.
func ByOutfitField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOutfitStep(), sql.OrderByField(field, opts...))
	}
}

// ByRibbonsField orders the results by ribbons field.
func ByRibbonsField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRibbonsStep(), sql.OrderByField(field, opts...))
	}
}
func newOutfitStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OutfitInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, OutfitTable, OutfitColumn),
	)
}
func newRibbonsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RibbonsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, RibbonsTable, RibbonsColumn),
	)
}
