// Code generated by ent, DO NOT EDIT.

package ribbon

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/mikestefanello/pagoda/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Ribbon {
	return predicate.Ribbon(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Ribbon {
	return predicate.Ribbon(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Ribbon {
	return predicate.Ribbon(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Ribbon {
	return predicate.Ribbon(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Ribbon {
	return predicate.Ribbon(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Ribbon {
	return predicate.Ribbon(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Ribbon {
	return predicate.Ribbon(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Ribbon {
	return predicate.Ribbon(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Ribbon {
	return predicate.Ribbon(sql.FieldLTE(FieldID, id))
}

// Timestamp applies equality check predicate on the "timestamp" field. It's identical to TimestampEQ.
func Timestamp(v time.Time) predicate.Ribbon {
	return predicate.Ribbon(sql.FieldEQ(FieldTimestamp, v))
}

// RibbonID applies equality check predicate on the "ribbon_id" field. It's identical to RibbonIDEQ.
func RibbonID(v int) predicate.Ribbon {
	return predicate.Ribbon(sql.FieldEQ(FieldRibbonID, v))
}

// RibbonCount applies equality check predicate on the "ribbon_count" field. It's identical to RibbonCountEQ.
func RibbonCount(v int) predicate.Ribbon {
	return predicate.Ribbon(sql.FieldEQ(FieldRibbonCount, v))
}

// TimestampEQ applies the EQ predicate on the "timestamp" field.
func TimestampEQ(v time.Time) predicate.Ribbon {
	return predicate.Ribbon(sql.FieldEQ(FieldTimestamp, v))
}

// TimestampNEQ applies the NEQ predicate on the "timestamp" field.
func TimestampNEQ(v time.Time) predicate.Ribbon {
	return predicate.Ribbon(sql.FieldNEQ(FieldTimestamp, v))
}

// TimestampIn applies the In predicate on the "timestamp" field.
func TimestampIn(vs ...time.Time) predicate.Ribbon {
	return predicate.Ribbon(sql.FieldIn(FieldTimestamp, vs...))
}

// TimestampNotIn applies the NotIn predicate on the "timestamp" field.
func TimestampNotIn(vs ...time.Time) predicate.Ribbon {
	return predicate.Ribbon(sql.FieldNotIn(FieldTimestamp, vs...))
}

// TimestampGT applies the GT predicate on the "timestamp" field.
func TimestampGT(v time.Time) predicate.Ribbon {
	return predicate.Ribbon(sql.FieldGT(FieldTimestamp, v))
}

// TimestampGTE applies the GTE predicate on the "timestamp" field.
func TimestampGTE(v time.Time) predicate.Ribbon {
	return predicate.Ribbon(sql.FieldGTE(FieldTimestamp, v))
}

// TimestampLT applies the LT predicate on the "timestamp" field.
func TimestampLT(v time.Time) predicate.Ribbon {
	return predicate.Ribbon(sql.FieldLT(FieldTimestamp, v))
}

// TimestampLTE applies the LTE predicate on the "timestamp" field.
func TimestampLTE(v time.Time) predicate.Ribbon {
	return predicate.Ribbon(sql.FieldLTE(FieldTimestamp, v))
}

// RibbonIDEQ applies the EQ predicate on the "ribbon_id" field.
func RibbonIDEQ(v int) predicate.Ribbon {
	return predicate.Ribbon(sql.FieldEQ(FieldRibbonID, v))
}

// RibbonIDNEQ applies the NEQ predicate on the "ribbon_id" field.
func RibbonIDNEQ(v int) predicate.Ribbon {
	return predicate.Ribbon(sql.FieldNEQ(FieldRibbonID, v))
}

// RibbonIDIn applies the In predicate on the "ribbon_id" field.
func RibbonIDIn(vs ...int) predicate.Ribbon {
	return predicate.Ribbon(sql.FieldIn(FieldRibbonID, vs...))
}

// RibbonIDNotIn applies the NotIn predicate on the "ribbon_id" field.
func RibbonIDNotIn(vs ...int) predicate.Ribbon {
	return predicate.Ribbon(sql.FieldNotIn(FieldRibbonID, vs...))
}

// RibbonIDGT applies the GT predicate on the "ribbon_id" field.
func RibbonIDGT(v int) predicate.Ribbon {
	return predicate.Ribbon(sql.FieldGT(FieldRibbonID, v))
}

// RibbonIDGTE applies the GTE predicate on the "ribbon_id" field.
func RibbonIDGTE(v int) predicate.Ribbon {
	return predicate.Ribbon(sql.FieldGTE(FieldRibbonID, v))
}

// RibbonIDLT applies the LT predicate on the "ribbon_id" field.
func RibbonIDLT(v int) predicate.Ribbon {
	return predicate.Ribbon(sql.FieldLT(FieldRibbonID, v))
}

// RibbonIDLTE applies the LTE predicate on the "ribbon_id" field.
func RibbonIDLTE(v int) predicate.Ribbon {
	return predicate.Ribbon(sql.FieldLTE(FieldRibbonID, v))
}

// RibbonCountEQ applies the EQ predicate on the "ribbon_count" field.
func RibbonCountEQ(v int) predicate.Ribbon {
	return predicate.Ribbon(sql.FieldEQ(FieldRibbonCount, v))
}

// RibbonCountNEQ applies the NEQ predicate on the "ribbon_count" field.
func RibbonCountNEQ(v int) predicate.Ribbon {
	return predicate.Ribbon(sql.FieldNEQ(FieldRibbonCount, v))
}

// RibbonCountIn applies the In predicate on the "ribbon_count" field.
func RibbonCountIn(vs ...int) predicate.Ribbon {
	return predicate.Ribbon(sql.FieldIn(FieldRibbonCount, vs...))
}

// RibbonCountNotIn applies the NotIn predicate on the "ribbon_count" field.
func RibbonCountNotIn(vs ...int) predicate.Ribbon {
	return predicate.Ribbon(sql.FieldNotIn(FieldRibbonCount, vs...))
}

// RibbonCountGT applies the GT predicate on the "ribbon_count" field.
func RibbonCountGT(v int) predicate.Ribbon {
	return predicate.Ribbon(sql.FieldGT(FieldRibbonCount, v))
}

// RibbonCountGTE applies the GTE predicate on the "ribbon_count" field.
func RibbonCountGTE(v int) predicate.Ribbon {
	return predicate.Ribbon(sql.FieldGTE(FieldRibbonCount, v))
}

// RibbonCountLT applies the LT predicate on the "ribbon_count" field.
func RibbonCountLT(v int) predicate.Ribbon {
	return predicate.Ribbon(sql.FieldLT(FieldRibbonCount, v))
}

// RibbonCountLTE applies the LTE predicate on the "ribbon_count" field.
func RibbonCountLTE(v int) predicate.Ribbon {
	return predicate.Ribbon(sql.FieldLTE(FieldRibbonCount, v))
}

// HasCharacter applies the HasEdge predicate on the "character" edge.
func HasCharacter() predicate.Ribbon {
	return predicate.Ribbon(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, CharacterTable, CharacterColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCharacterWith applies the HasEdge predicate on the "character" edge with a given conditions (other predicates).
func HasCharacterWith(preds ...predicate.Character) predicate.Ribbon {
	return predicate.Ribbon(func(s *sql.Selector) {
		step := newCharacterStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Ribbon) predicate.Ribbon {
	return predicate.Ribbon(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Ribbon) predicate.Ribbon {
	return predicate.Ribbon(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Ribbon) predicate.Ribbon {
	return predicate.Ribbon(sql.NotPredicates(p))
}
