// Code generated by ent, DO NOT EDIT.

package ribbon

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the ribbon type in the database.
	Label = "ribbon"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTimestamp holds the string denoting the timestamp field in the database.
	FieldTimestamp = "timestamp"
	// FieldRibbonID holds the string denoting the ribbon_id field in the database.
	FieldRibbonID = "ribbon_id"
	// FieldRibbonCount holds the string denoting the ribbon_count field in the database.
	FieldRibbonCount = "ribbon_count"
	// EdgeCharacter holds the string denoting the character edge name in mutations.
	EdgeCharacter = "character"
	// Table holds the table name of the ribbon in the database.
	Table = "ribbons"
	// CharacterTable is the table that holds the character relation/edge.
	CharacterTable = "ribbons"
	// CharacterInverseTable is the table name for the Character entity.
	// It exists in this package in order to avoid circular dependency with the "character" package.
	CharacterInverseTable = "characters"
	// CharacterColumn is the table column denoting the character relation/edge.
	CharacterColumn = "character_ribbons"
)

// Columns holds all SQL columns for ribbon fields.
var Columns = []string{
	FieldID,
	FieldTimestamp,
	FieldRibbonID,
	FieldRibbonCount,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "ribbons"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"character_ribbons",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the Ribbon queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTimestamp orders the results by the timestamp field.
func ByTimestamp(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTimestamp, opts...).ToFunc()
}

// ByRibbonID orders the results by the ribbon_id field.
func ByRibbonID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRibbonID, opts...).ToFunc()
}

// ByRibbonCount orders the results by the ribbon_count field.
func ByRibbonCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRibbonCount, opts...).ToFunc()
}

// ByCharacterField orders the results by character field.
func ByCharacterField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCharacterStep(), sql.OrderByField(field, opts...))
	}
}
func newCharacterStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CharacterInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, CharacterTable, CharacterColumn),
	)
}
