// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/mikestefanello/pagoda/ent/character"
	"github.com/mikestefanello/pagoda/ent/outfit"
)

// OutfitCreate is the builder for creating a Outfit entity.
type OutfitCreate struct {
	config
	mutation *OutfitMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (oc *OutfitCreate) SetName(s string) *OutfitCreate {
	oc.mutation.SetName(s)
	return oc
}

// SetTag sets the "tag" field.
func (oc *OutfitCreate) SetTag(s string) *OutfitCreate {
	oc.mutation.SetTag(s)
	return oc
}

// SetFaction sets the "faction" field.
func (oc *OutfitCreate) SetFaction(u uint8) *OutfitCreate {
	oc.mutation.SetFaction(u)
	return oc
}

// SetID sets the "id" field.
func (oc *OutfitCreate) SetID(u uint64) *OutfitCreate {
	oc.mutation.SetID(u)
	return oc
}

// AddCharacterIDs adds the "characters" edge to the Character entity by IDs.
func (oc *OutfitCreate) AddCharacterIDs(ids ...int) *OutfitCreate {
	oc.mutation.AddCharacterIDs(ids...)
	return oc
}

// AddCharacters adds the "characters" edges to the Character entity.
func (oc *OutfitCreate) AddCharacters(c ...*Character) *OutfitCreate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return oc.AddCharacterIDs(ids...)
}

// Mutation returns the OutfitMutation object of the builder.
func (oc *OutfitCreate) Mutation() *OutfitMutation {
	return oc.mutation
}

// Save creates the Outfit in the database.
func (oc *OutfitCreate) Save(ctx context.Context) (*Outfit, error) {
	return withHooks(ctx, oc.sqlSave, oc.mutation, oc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (oc *OutfitCreate) SaveX(ctx context.Context) *Outfit {
	v, err := oc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (oc *OutfitCreate) Exec(ctx context.Context) error {
	_, err := oc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oc *OutfitCreate) ExecX(ctx context.Context) {
	if err := oc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (oc *OutfitCreate) check() error {
	if _, ok := oc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Outfit.name"`)}
	}
	if _, ok := oc.mutation.Tag(); !ok {
		return &ValidationError{Name: "tag", err: errors.New(`ent: missing required field "Outfit.tag"`)}
	}
	if _, ok := oc.mutation.Faction(); !ok {
		return &ValidationError{Name: "faction", err: errors.New(`ent: missing required field "Outfit.faction"`)}
	}
	return nil
}

func (oc *OutfitCreate) sqlSave(ctx context.Context) (*Outfit, error) {
	if err := oc.check(); err != nil {
		return nil, err
	}
	_node, _spec := oc.createSpec()
	if err := sqlgraph.CreateNode(ctx, oc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	oc.mutation.id = &_node.ID
	oc.mutation.done = true
	return _node, nil
}

func (oc *OutfitCreate) createSpec() (*Outfit, *sqlgraph.CreateSpec) {
	var (
		_node = &Outfit{config: oc.config}
		_spec = sqlgraph.NewCreateSpec(outfit.Table, sqlgraph.NewFieldSpec(outfit.FieldID, field.TypeUint64))
	)
	if id, ok := oc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := oc.mutation.Name(); ok {
		_spec.SetField(outfit.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := oc.mutation.Tag(); ok {
		_spec.SetField(outfit.FieldTag, field.TypeString, value)
		_node.Tag = value
	}
	if value, ok := oc.mutation.Faction(); ok {
		_spec.SetField(outfit.FieldFaction, field.TypeUint8, value)
		_node.Faction = value
	}
	if nodes := oc.mutation.CharactersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   outfit.CharactersTable,
			Columns: []string{outfit.CharactersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(character.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OutfitCreateBulk is the builder for creating many Outfit entities in bulk.
type OutfitCreateBulk struct {
	config
	err      error
	builders []*OutfitCreate
}

// Save creates the Outfit entities in the database.
func (ocb *OutfitCreateBulk) Save(ctx context.Context) ([]*Outfit, error) {
	if ocb.err != nil {
		return nil, ocb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ocb.builders))
	nodes := make([]*Outfit, len(ocb.builders))
	mutators := make([]Mutator, len(ocb.builders))
	for i := range ocb.builders {
		func(i int, root context.Context) {
			builder := ocb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OutfitMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ocb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ocb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ocb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ocb *OutfitCreateBulk) SaveX(ctx context.Context) []*Outfit {
	v, err := ocb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ocb *OutfitCreateBulk) Exec(ctx context.Context) error {
	_, err := ocb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ocb *OutfitCreateBulk) ExecX(ctx context.Context) {
	if err := ocb.Exec(ctx); err != nil {
		panic(err)
	}
}
